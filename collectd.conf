TypesDB "/etc/collectd/collectd.conf.d/postgres.types.db"

<Plugin postgresql>
        <Query stat_database>
                Statement " \
SELECT datname AS database, numbackends, xact_commit, xact_rollback, \
       blks_read, blks_hit, tup_returned, tup_fetched, tup_inserted, \
       tup_updated, tup_deleted \
FROM pg_stat_database;"
                <Result>
                        Type database_stats
                        InstancePrefix "database_stats"
                        InstancesFrom "database"
                        ValuesFrom "numbackends"
                </Result>
                <Result>
                        Type database_stats_xact
                        InstancePrefix "database_stats"
                        InstancesFrom "database"
                        ValuesFrom "xact_rollback" "xact_commit"
                </Result>
                <Result>
                        Type database_stats_blks
                        InstancePrefix "database_stats"
                        InstancesFrom "database"
                        ValuesFrom "blks_read" "blks_hit"
                </Result>
                <Result>
                        Type database_stats_tup
                        InstancePrefix "database_stats"
                        InstancesFrom "database"
                        ValuesFrom "tup_returned" "tup_fetched" "tup_inserted" "tup_updated" "tup_deleted"
                </Result>
        </Query>


        <Query stat_bgwriter>
                Statement "SELECT checkpoints_timed, checkpoints_req, \
buffers_checkpoint * current_setting('block_size')::numeric as buffers_checkpoint, \
buffers_clean * current_setting('block_size')::numeric as buffers_clean, \
maxwritten_clean, \
buffers_backend * current_setting('block_size')::numeric as buffers_backend, \
buffers_alloc * current_setting('block_size')::numeric as buffers_alloc, \
buffers_backend_fsync \
FROM pg_stat_bgwriter;"
                <Result>
                        Type bgwriter_stats_checkpoints
                        InstancePrefix "bgwriter_stats"
                        ValuesFrom "checkpoints_timed" "checkpoints_req"
                </Result>
                <Result>
                        Type bgwriter_stats_buffers
                        InstancePrefix "bgwriter_stats"
                        ValuesFrom "buffers_checkpoint" "buffers_clean" "buffers_backend" "buffers_alloc"
                </Result>
                <Result>
                        Type bgwriter_stats_others
                        InstancePrefix "bgwriter_stats"
                        ValuesFrom "maxwritten_clean" "buffers_backend_fsync"
                </Result>

        </Query>

        <Query cache_hitratio>
                Statement "SELECT d.datname, \  
round((blks_hit::float/(blks_read+blks_hit+1)*100)::numeric, 2) as cachehitratio \
FROM pg_stat_database sd \
JOIN pg_database d ON d.oid = sd.datid \
WHERE d.datallowconn AND NOT d.datistemplate \  
AND (blks_read+blks_hit) > 0 \
ORDER BY datname, cachehitratio;"
                <Result>
                        Type percent
                        InstancePrefix "cache_hitratio"
                        InstancesFrom "datname" 
                        ValuesFrom "cachehitratio"
                </Result>
        </Query>


   <Query stat_index>
                Statement "select a.indexrelname,  idx_scan, idx_tup_read, idx_tup_fetch, \
idx_blks_read, idx_blks_hit from pg_stat_all_indexes a  \
INNER JOIN pg_statio_all_indexes b ON a.indexrelid = b.indexrelid \
WHERE a.indexrelname = 'pgbench_accounts_pkey';"

                <Result>
                        Type index_stats
                        InstancePrefix "index_stats"
                        InstancesFrom "indexrelname"
                        ValuesFrom "idx_scan" "idx_tup_read" "idx_tup_fetch" "idx_blks_read" "idx_blks_hit"
                </Result>
        </Query>


   <Query last_analyze>
                Statement "SELECT coalesce(min(extract(epoch FROM current_timestamp - greatest(last_analyze, last_autoanalyze))), 'NaN'::float) AS duration, \
coalesce(sum(analyze_count), 0) AS analyze_count, coalesce(sum(autoanalyze_count), 0) AS autoanalyze_count \
FROM pg_stat_user_tables;"

                <Result>
                        Type analyze_stats
                        InstancePrefix "analyze_stats"
                        ValuesFrom "duration" "analyze_count" "autoanalyze_count"
                </Result>
        </Query>

   <Query last_vacuum>
                Statement "SELECT coalesce(min(extract(epoch FROM current_timestamp - greatest(last_vacuum, last_autovacuum))), 'NaN'::float) AS duration, \
coalesce(sum(vacuum_count), 0) AS vacuum_count, coalesce(sum(autovacuum_count), 0) AS autovacuum_count \
FROM pg_stat_user_tables;"

                <Result>
                        Type vacuum_stats
                        InstancePrefix "vacuum_stats"
                        ValuesFrom "duration" "vacuum_count" "vacuum_count"
                </Result>
        </Query>
   <Query active_queries>
                Statement "SELECT  count(query) as queries_count FROM pg_stat_activity \
WHERE state = 'active';"

                <Result>
                        Type gauge
                        InstancePrefix "nb_queries"
                        ValuesFrom "queries_count"
                </Result>
        </Query>

   <Query total_size>
                Statement "SELECT sum(pg_database_size(datname)) as total_size \
                   FROM pg_database WHERE datistemplate = 'f';"

                <Result>
                        Type gauge
                        InstancePrefix "total_size"
                        ValuesFrom "total_size" 
                </Result>
        </Query>
#	<Query magic>
#		Statement "SELECT magic FROM wizard WHERE host = $1;"
#		Param hostname
#
#		<Result>
#			Type gauge
#			InstancePrefix "magic"
#			ValuesFrom "magic"
#		</Result>
#	</Query>
#
#	<Query rt36_tickets>
#		Statement "SELECT COUNT(type) AS count, type \
#		                  FROM (SELECT CASE \
#		                               WHEN resolved = 'epoch' THEN 'open' \
#		                               ELSE 'resolved' END AS type \
#		                               FROM tickets) type \
#		                  GROUP BY type;"
#
#		<Result>
#			Type counter
#			InstancePrefix "rt36_tickets"
#			InstancesFrom "type"
#			ValuesFrom "count"
#		</Result>
#	</Query>
#
#	<Writer sqlstore>
#		# See /usr/share/doc/collectd-core/examples/postgresql/collectd_insert.sql for details
#		Statement "SELECT collectd_insert($1, $2, $3, $4, $5, $6, $7, $8, $9);"
#		StoreRates true
#	</Writer>
#
#	<Database foo>
#		Host "hostname"
#		Port 5432
#		User "username"
#		Password "secret"
#
#		SSLMode "prefer"
#		KRBSrvName "kerberos_service_name"
#
#		Query magic
#	</Database>
#
	<Database stack>
		Host "127.0.0.1"
		Port 5432
		User "postgres"
		Interval 60
#
#		Query backend # predefined
                Query stat_database
                Query cache_hitratio
                Query stat_bgwriter
                Query backends
                Query disk_usage
                Query stat_index
                Query last_analyze
                Query last_vacuum
                Query active_queries
                Query total_size
#		Query rt36_tickets
	</Database>
#
#	<Database qux>
#		Service "collectd_store"
#		Writer sqlstore
#		# see collectd.conf(5) for details
#		CommitInterval 30
#	</Database>
</Plugin>


